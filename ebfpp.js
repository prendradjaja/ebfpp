/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,30,31,32,33,34,35,36,37,38,40,41,42,43,44,47,48,51,54,55,57,58,59,61,63,64,66,67,68,70,74],$V1=[2,2],$V2=[1,49],$V3=[1,50],$V4=[1,51],$V5=[1,52],$V6=[1,53],$V7=[1,54],$V8=[1,55],$V9=[1,56],$Va=[1,28],$Vb=[1,29],$Vc=[1,30],$Vd=[1,31],$Ve=[1,32],$Vf=[1,33],$Vg=[1,57],$Vh=[1,36],$Vi=[1,58],$Vj=[1,59],$Vk=[1,39],$Vl=[1,41],$Vm=[1,40],$Vn=[1,42],$Vo=[1,43],$Vp=[1,44],$Vq=[1,45],$Vr=[1,46],$Vs=[1,47],$Vt=[1,48],$Vu=[1,109],$Vv=[39,48],$Vw=[50,72],$Vx=[48,74],$Vy=[1,117],$Vz=[48,58,74];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"file":3,"program":4,"EOF":5,"instruction":6,"bf_command":7,"def_var":8,"go_var":9,"at_var":10,"dealloc_var":11,"l_paren":12,"r_paren":13,"def_macro":14,"put_argument":15,"put_macro":16,"go_offset":17,"at_offset":18,"multiplier":19,"store_str":20,"print_str":21,"def_array_size":22,"def_array_init":23,"goto_index_static":24,"goto_index_dynamic":25,"for_loop":26,"def_struct":27,"goto_member":28,"bf_char":29,"+":30,"-":31,"[":32,"]":33,"<":34,">":35,".":36,",":37,":":38,"ID":39,"$":40,"@":41,"!":42,"(":43,")":44,"def_macro_no_args":45,"def_macro_with_args":46,"{":47,"}":48,"id_list":49,"\\\\\\\\":50,"%":51,"put_macro_no_args":52,"put_macro_with_args":53,"&":54,"&{":55,"arg_list":56,"^":57,"NUM":58,"*":59,"sign":60,"~":61,"STR":62,"|":63,"::":64,"array_values":65,"$:":66,"$!":67,":=":68,"member_name_list":69,"$$":70,"nonempty_id_list":71,"\\\\":72,"nonempty_arg_list":73,"/":74,"struct_values":75,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",30:"+",31:"-",32:"[",33:"]",34:"<",35:">",36:".",37:",",38:":",39:"ID",40:"$",41:"@",42:"!",43:"(",44:")",47:"{",48:"}",50:"\\\\\\\\",51:"%",54:"&",55:"&{",57:"^",58:"NUM",59:"*",61:"~",62:"STR",63:"|",64:"::",66:"$:",67:"$!",68:":=",70:"$$",72:"\\\\",74:"/"},
productions_: [0,[3,2],[4,0],[4,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[8,2],[9,2],[10,2],[11,2],[12,1],[13,1],[14,1],[14,1],[45,4],[46,6],[15,2],[16,1],[16,1],[52,2],[53,4],[17,2],[18,3],[60,1],[60,1],[19,2],[20,2],[21,2],[22,4],[23,6],[24,3],[25,3],[26,5],[27,5],[28,2],[49,1],[49,0],[71,3],[71,2],[56,1],[56,0],[73,3],[73,2],[65,3],[65,1],[75,2],[75,1],[69,2],[69,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2: case 65: case 69:
this.$ = [];
break;
case 3:
this.$ = util.array_concat($$[$0-1], [instruction_info($$[$0], _$[$0])]);
break;
case 26:
this.$ = util.bf_command($$[$0]);
break;
case 35:
this.$ = util.def_var($$[$0]);
break;
case 36:
this.$ = util.go_var($$[$0]);
break;
case 37:
this.$ = util.at_var($$[$0]);
break;
case 38:
this.$ = util.dealloc_var($$[$0]);
break;
case 39:
this.$ = util.l_paren();
break;
case 40:
this.$ = util.r_paren();
break;
case 43:
this.$ = util.def_macro($$[$0-2], [], $$[$0-1]);
break;
case 44:
this.$ = util.def_macro($$[$0-4], $$[$0-3], $$[$0-1]);
break;
case 45:
this.$ = util.put_argument($$[$0]);
break;
case 48:
this.$ = util.put_macro($$[$0], []);
break;
case 49:
this.$ = util.put_macro($$[$0-2], $$[$0-1]);
break;
case 50:
this.$ = util.go_offset(Number($$[$0]));
break;
case 51:
this.$ = util.at_offset(Number($$[$0-1] + $$[$0]));
break;
case 54:
this.$ = util.multiplier($$[$0], Number($$[$0-1]));
break;
case 55:
this.$ = util.store_str($$[$0].substring(1, $$[$0].length-1));
break;
case 56:
this.$ = util.print_str($$[$0].substring(1, $$[$0].length-1));
break;
case 57:
this.$ = util.def_array_size($$[$0-2], $$[$0-1], Number($$[$0]));
break;
case 58:
this.$ = util.def_array_init($$[$0-4], $$[$0-3], $$[$0-1]);
break;
case 59:
this.$ = util.goto_index_static($$[$0-1], Number($$[$0]));
break;
case 60:
this.$ = util.goto_index_dynamic($$[$0-1], $$[$0]);
break;
case 61:
this.$ = util.for_loop($$[$0-3], $$[$0-1]);
break;
case 62:
this.$ = util.def_struct($$[$0-3], $$[$0-1]);
break;
case 63:
this.$ = util.goto_member($$[$0]);
break;
case 66: case 70: case 72:
this.$ = util.array_concat($$[$0-2], [$$[$0]]);
break;
case 67: case 71: case 73: case 77:
this.$ = [$$[$0]];
break;
case 74:
this.$ = util.array_concat($$[$0-1], [Number($$[$0])]);
break;
case 75:
this.$ = [Number($$[$0])];
break;
case 76:
this.$ = util.array_concat($$[$0-1], [$$[$0]]);
break;
}
},
table: [o($V0,$V1,{3:1,4:2}),{1:[3]},{5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:26,29:27,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,40:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:34,46:35,47:$Vg,51:$Vh,52:37,53:38,54:$Vi,55:$Vj,57:$Vk,58:$Vl,59:$Vm,61:$Vn,63:$Vo,64:$Vp,66:$Vq,67:$Vr,68:$Vs,70:$Vt},{1:[2,1]},o($V0,[2,3]),o($V0,[2,4]),o($V0,[2,5]),o($V0,[2,6]),o($V0,[2,7]),o($V0,[2,8]),o($V0,[2,9]),o($V0,[2,10]),o($V0,[2,11]),o($V0,[2,12]),o($V0,[2,13]),o($V0,[2,14]),o($V0,[2,15]),o($V0,[2,16]),o($V0,[2,17]),o($V0,[2,18]),o($V0,[2,19]),o($V0,[2,20]),o($V0,[2,21]),o($V0,[2,22]),o($V0,[2,23]),o($V0,[2,24]),o($V0,[2,25]),o($V0,[2,26]),{39:[1,60]},{39:[1,61]},{39:[1,62]},{39:[1,63]},o($V0,[2,39]),o($V0,[2,40]),o($V0,[2,41]),o($V0,[2,42]),{39:[1,64]},o($V0,[2,46]),o($V0,[2,47]),{58:[1,65]},{30:[1,67],31:[1,68],60:66},{29:69,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,37:$V9},{39:[1,71],62:[1,70]},{62:[1,72]},{39:[1,73]},{39:[1,74]},{39:[1,75]},{39:[1,76]},{39:[1,77]},o($V0,[2,27]),o($V0,[2,28]),o($V0,[2,29]),o($V0,[2,30]),o($V0,[2,31]),o($V0,[2,32]),o($V0,[2,33]),o($V0,[2,34]),{39:[1,78]},{39:[1,79]},{39:[1,80]},o($V0,[2,35]),o($V0,[2,36]),o($V0,[2,37]),o($V0,[2,38]),o($V0,[2,45]),o($V0,[2,50]),{58:[1,81]},{58:[2,52]},{58:[2,53]},o($V0,[2,54]),o($V0,[2,55]),{47:[1,82]},o($V0,[2,56]),{39:[1,83]},{58:[1,84]},{39:[1,85]},{47:[1,86]},o($V0,[2,63]),o($V0,$V1,{4:87,49:88,71:89,50:[2,65],72:[1,90]}),o($V0,[2,48]),{48:[2,69],56:91,73:92,74:[1,93]},o($V0,[2,51]),o($V0,$V1,{4:94}),{47:[1,96],58:[1,95]},o($V0,[2,59]),o($V0,[2,60]),{39:[1,98],69:97},{6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:26,29:27,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,40:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:34,46:35,47:$Vg,48:[1,99],51:$Vh,52:37,53:38,54:$Vi,55:$Vj,57:$Vk,58:$Vl,59:$Vm,61:$Vn,63:$Vo,64:$Vp,66:$Vq,67:$Vr,68:$Vs,70:$Vt},{50:[1,100]},{50:[2,64],72:[1,101]},{39:[1,102]},{48:[1,103]},{48:[2,68],74:[1,104]},o($V0,$V1,{4:105}),{6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:26,29:27,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,40:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:34,46:35,47:$Vg,48:[1,106],51:$Vh,52:37,53:38,54:$Vi,55:$Vj,57:$Vk,58:$Vl,59:$Vm,61:$Vn,63:$Vo,64:$Vp,66:$Vq,67:$Vr,68:$Vs,70:$Vt},o($V0,[2,57]),{58:$Vu,65:107,75:108},{39:[1,111],48:[1,110]},o($Vv,[2,77]),o($V0,[2,43]),o($V0,$V1,{4:112}),{39:[1,113]},o($Vw,[2,67]),o($V0,[2,49]),o($V0,$V1,{4:114}),o($Vx,[2,71],{6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:26,29:27,45:34,46:35,52:37,53:38,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,40:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,47:$Vg,51:$Vh,54:$Vi,55:$Vj,57:$Vk,58:$Vl,59:$Vm,61:$Vn,63:$Vo,64:$Vp,66:$Vq,67:$Vr,68:$Vs,70:$Vt}),o($V0,[2,61]),{48:[1,115],74:[1,116]},o($Vx,[2,73],{58:$Vy}),o($Vz,[2,75]),o($V0,[2,62]),o($Vv,[2,76]),{6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:26,29:27,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,40:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:34,46:35,47:$Vg,48:[1,118],51:$Vh,52:37,53:38,54:$Vi,55:$Vj,57:$Vk,58:$Vl,59:$Vm,61:$Vn,63:$Vo,64:$Vp,66:$Vq,67:$Vr,68:$Vs,70:$Vt},o($Vw,[2,66]),o($Vx,[2,70],{6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:26,29:27,45:34,46:35,52:37,53:38,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,40:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,47:$Vg,51:$Vh,54:$Vi,55:$Vj,57:$Vk,58:$Vl,59:$Vm,61:$Vn,63:$Vo,64:$Vp,66:$Vq,67:$Vr,68:$Vs,70:$Vt}),o($V0,[2,58]),{58:$Vu,75:119},o($Vz,[2,74]),o($V0,[2,44]),o($Vx,[2,72],{58:$Vy})],
defaultActions: {3:[2,1],67:[2,52],68:[2,53]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
 /* utility */

if (typeof require !== 'undefined') {
    util = require('./util.js');
}

// NOTE: this function appears also in compiler/compiler.js. This is a hacky
// solution right now, fix it later. But if you change it here, change it
// there too.
function named_list(fieldnamestr) {
    var fields = fieldnamestr.split(' ');
    return function () {
        var arr = arguments;
        if (arr.length !== fields.length) {
            crash_with_error('Tried to instantiate a named_list with the wrong number of arguments.');
        }
        var obj = {};

        for(var i = 0; i < arr.length; i++) {
            obj[fields[i]] = arr[i];
        }

        return obj;
    };
}

var instruction_info = named_list('instruction position');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip comments */
break;
case 2:return 30
break;
case 3:return 31
break;
case 4:return 32
break;
case 5:return 33
break;
case 6:return 34
break;
case 7:return 35
break;
case 8:return 36
break;
case 9:return 37
break;
case 10:return 55
break;
case 11:return 64
break;
case 12:return 66
break;
case 13:return 67
break;
case 14:return 68
break;
case 15:return 70
break;
case 16:return 38
break;
case 17:return 40
break;
case 18:return 41
break;
case 19:return 42
break;
case 20:return 43
break;
case 21:return 44
break;
case 22:return 51
break;
case 23:return 54
break;
case 24:return 47
break;
case 25:return 48
break;
case 26:return 57
break;
case 27:return 59
break;
case 28:return 61
break;
case 29:return 63
break;
case 30:return 50
break;
case 31:return 72
break;
case 32:return 74
break;
case 33:return 58
break;
case 34:return 39
break;
case 35:return 62
break;
case 36:return 62
break;
case 37:return 5
break;
case 38:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:;.*)/,/^(?:\+)/,/^(?:-)/,/^(?:\[)/,/^(?:\])/,/^(?:<)/,/^(?:>)/,/^(?:\.)/,/^(?:,)/,/^(?:&\{)/,/^(?:::)/,/^(?:\$:)/,/^(?:\$!)/,/^(?::=)/,/^(?:\$\$)/,/^(?::)/,/^(?:\$)/,/^(?:@)/,/^(?:!)/,/^(?:\()/,/^(?:\))/,/^(?:%)/,/^(?:&)/,/^(?:\{)/,/^(?:\})/,/^(?:\^)/,/^(?:\*)/,/^(?:~)/,/^(?:\|)/,/^(?:\\\\)/,/^(?:\\)/,/^(?:\/)/,/^(?:[0-9]+)/,/^(?:[A-Za-z_][A-Za-z0-9_]*)/,/^(?:"[^"]*")/,/^(?:'[^']*')/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}