; This version does use EBF's variables, which makes structs and arrays very
; easy.

;;; Read in the input.

; Define variables for the two members of the zeroth struct.

:count
:character

{read_struct            ; Thanks to variables, we don't have to do the
  $count     , 48-      ; arithmetic to get to each member of the struct; we
  $character ,          ; just tell the compiler which variables we want.
}

&read_struct
46-[46+
  $count 2>             ; Move to head of next struct. Again, we don't need to
                        ; worry about pointer arithmetic anymore.
                        ;
                        ; The previous version had this code:
                        ;   >
                        ; Moving one cell brings us to the next struct, but we
                        ; had to calculate that we were one cell into the
                        ; current struct, and therefore only had to move 2-1=1
                        ; cell to get to the next.
                        ;
                        ; Here, we just tell the compiler to go to the head of
                        ; the struct by indicating its first member, and then
                        ; move two cells (the length of a struct) to get to
                        ; the next.

  @count                ; Lie to the compiler, saying that we're actually
                        ; still at the count variable, so that when we use
                        ; $count and $character, they will read values into
                        ; the next struct!
  &read_struct
46-]

;;; Output the result.

<

2<[
  @count                ; Again, tell the compiler that we're at the count
                        ; variable, which allows us to use $count and
                        ; $character to refer to the current struct.
  (-$character.<)
2<]
