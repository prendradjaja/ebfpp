; Zero the given cell.
{zero \ x \\
  %x (-)}

; Pour src into dst, leaving the pointer at src.
{pour \ src \ dst \\
  %src (- %dst+)}

; Pour src into both dst variables.
{split \ src \ dst0 \ dst1 \\
  %src (- %dst0+ %dst1+)}

; Copy src into dst.
; tmp is assumed to be zero, and is zero afterwards.
; The pointer ends at src.
{copy \ src \ dst \ tmp \\
  &{split / %src / %dst / %tmp}
  &{pour / %tmp / %src}
  %src}

; Add src into dst, leaving the pointer at src.
; tmp is assumed to be zero, and is zero afterwards.
; src retains its value.
; The pointer ends at src.
{add \ src \ dst \ tmp \\
  &{split / %src / %dst / %tmp}
  &{pour / %tmp / %src}
  %src}

; Multiply src into dst, leaving the pointer at src.
; tmp variables are assumed to be zero, and are zero afterwards.
; src retains its value.
; The pointer ends at src.
{mul \ src \ dst \ tmp0 \ tmp1 \ tmp2 \\
  &{copy / %src / %tmp0 / %tmp1}
  %tmp0 (-
    &{add / %dst / %tmp2 / %tmp1})
  &{zero / %dst}
  &{pour / %tmp2 / %dst}
  %src}

; if, if_zero and if_else are adapted from
; http://esolangs.org/wiki/Brainfuck_algorithms
{if \ cond \ temp0 \ temp1 \ then \\
  %temp0[-]%temp1[-]%cond[%temp0+%temp1+%cond-]%temp0[%cond+%temp0-]%temp1[
    %then
  %temp1[-]]}

{if_zero \ cond \ temp0 \ temp1 \ then \\
  %temp0[-]%temp1[-]%cond[%temp0+%temp1+%cond-]%temp0[%cond+%temp0-]+%temp1[%temp0-%temp1[-]]%temp0[
    %then
  %temp0-]}

{if_else \ cond \ temp0 \ temp1 \ then \ else \\
  %temp0[-]%temp1[-]%cond[%temp0+%temp1+%cond-]%temp0[%cond+%temp0-]+%temp1[
    %then
  %temp0-%temp1[-]]%temp0[
    %else
  %temp0-]}
